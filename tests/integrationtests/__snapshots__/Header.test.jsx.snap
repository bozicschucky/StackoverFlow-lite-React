// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests the mounted Header component tests the Header component against the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <_default />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ul
        className="nav-bar"
      >
        <div>
          <NavLink
            activeClassName="active"
            aria-current="page"
            to="/"
          >
            MiniOverFlow
          </NavLink>
        </div>
      </ul>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          <NavLink
            activeClassName="active"
            aria-current="page"
            to="/"
          >
            MiniOverFlow
          </NavLink>
        </div>,
        "className": "nav-bar",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <NavLink
            activeClassName="active"
            aria-current="page"
            to="/"
          >
            MiniOverFlow
          </NavLink>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "aria-current": "page",
            "children": "MiniOverFlow",
            "to": "/",
          },
          "ref": null,
          "rendered": "MiniOverFlow",
          "type": [Function],
        },
        "type": "div",
      },
      "type": "ul",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ul
          className="nav-bar"
        >
          <div>
            <NavLink
              activeClassName="active"
              aria-current="page"
              to="/"
            >
              MiniOverFlow
            </NavLink>
          </div>
        </ul>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div>
            <NavLink
              activeClassName="active"
              aria-current="page"
              to="/"
            >
              MiniOverFlow
            </NavLink>
          </div>,
          "className": "nav-bar",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <NavLink
              activeClassName="active"
              aria-current="page"
              to="/"
            >
              MiniOverFlow
            </NavLink>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "activeClassName": "active",
              "aria-current": "page",
              "children": "MiniOverFlow",
              "to": "/",
            },
            "ref": null,
            "rendered": "MiniOverFlow",
            "type": [Function],
          },
          "type": "div",
        },
        "type": "ul",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
